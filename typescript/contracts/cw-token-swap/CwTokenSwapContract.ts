/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  fund: {
    [k: string]: unknown;
  };
} | {
  withdraw: {
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export type Binary = string;
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
export type TokenInfo = {
  native: {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
  };
} | {
  cw20: {
    amount: Uint128;
    contract_addr: string;
    [k: string]: unknown;
  };
};
export interface InstantiateMsg {
  counterparty_one: Counterparty;
  counterparty_two: Counterparty;
  [k: string]: unknown;
}
export interface Counterparty {
  address: string;
  promise: TokenInfo;
  [k: string]: unknown;
}
export type QueryMsg = {
  status: {
    [k: string]: unknown;
  };
};
export type Addr = string;
export type CheckedTokenInfo = {
  native: {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
  };
} | {
  cw20: {
    amount: Uint128;
    contract_addr: Addr;
    [k: string]: unknown;
  };
};
export interface StatusResponse {
  counterparty_one: CheckedCounterparty;
  counterparty_two: CheckedCounterparty;
  [k: string]: unknown;
}
export interface CheckedCounterparty {
  address: Addr;
  promise: CheckedTokenInfo;
  provided: boolean;
  [k: string]: unknown;
}
export interface CwTokenSwapReadOnlyInterface {
  contractAddress: string;
  status: () => Promise<StatusResponse>;
}
export class CwTokenSwapQueryClient implements CwTokenSwapReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.status = this.status.bind(this);
  }

  status = async (): Promise<StatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      status: {}
    });
  };
}
export interface CwTokenSwapInterface extends CwTokenSwapReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: string;
    msg: string;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  fund: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class CwTokenSwapClient extends CwTokenSwapQueryClient implements CwTokenSwapInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.fund = this.fund.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: string;
    msg: string;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  fund = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      fund: {}
    }, fee, memo, funds);
  };
  withdraw = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee, memo, funds);
  };
}