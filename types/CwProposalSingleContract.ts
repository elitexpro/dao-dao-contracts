/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
export type ExecuteMsg = {
  member_changed_hook: {
    diffs: MemberDiff[];
    [k: string]: unknown;
  };
};
export type Binary = string;
export interface InstantiateMsg {
  cw4_group_code_id: number;
  initial_members: Member[];
  [k: string]: unknown;
}
export type Addr = string;
export interface AdminNominationResponse {
  nomination?: Addr | null;
  [k: string]: unknown;
}
export type AdminResponse = Addr | null;
export interface ConfigResponse {
  allow_revoting: boolean;
  dao: Addr;
  deposit_info?: CheckedDepositInfo | null;
  max_voting_period: Duration;
  min_voting_period?: Duration | null;
  only_members_execute: boolean;
  threshold: Threshold;
  [k: string]: unknown;
}
export type Uint128 = string;
export interface Cw20BalancesResponse {
  addr: Addr;
  balance: Uint128;
  [k: string]: unknown;
}
export type Cw20TokenListResponse = Addr[];
export type Cw721TokenListResponse = Addr[];
export type PauseInfoResponse = {
  Paused: {
    expiration: Expiration;
    [k: string]: unknown;
  };
} | {
  Unpaused: {
    [k: string]: unknown;
  };
};
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export interface DumpStateResponse {
  admin: Addr;
  config: Config;
  pause_info: PauseInfoResponse;
  proposal_modules: Addr[];
  version: ContractVersion;
  voting_module: Addr;
  [k: string]: unknown;
}
export interface Config {
  owner: Addr;
  reward_rate: Uint128;
  reward_token: Addr;
  staking_addr: Addr;
  [k: string]: unknown;
}
export interface ContractVersion {
  contract: string;
  version: string;
  [k: string]: unknown;
}
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  stargate: {
    type_url: string;
    value: Binary;
    [k: string]: unknown;
  };
} | {
  ibc: IbcMsg;
} | {
  wasm: WasmMsg;
} | {
  gov: GovMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type IbcMsg = {
  transfer: {
    amount: Coin;
    channel_id: string;
    timeout: IbcTimeout;
    to_address: string;
    [k: string]: unknown;
  };
} | {
  send_packet: {
    channel_id: string;
    data: Binary;
    timeout: IbcTimeout;
    [k: string]: unknown;
  };
} | {
  close_channel: {
    channel_id: string;
    [k: string]: unknown;
  };
};
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type Duration = {
  height: number;
} | {
  time: number;
};
export type Admin = {
  address: {
    addr: string;
    [k: string]: unknown;
  };
} | {
  core_contract: {
    [k: string]: unknown;
  };
} | {
  none: {
    [k: string]: unknown;
  };
};
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
export interface Cw721ReceiveMsg {
  msg: Binary;
  sender: string;
  token_id: string;
  [k: string]: unknown;
}
export interface ModuleInstantiateInfo {
  admin: Admin;
  code_id: number;
  label: string;
  msg: Binary;
  [k: string]: unknown;
}
export interface GetItemResponse {
  item?: string | null;
  [k: string]: unknown;
}
export type GovernanceModulesResponse = Addr[];
export interface InfoResponse {
  info: ContractVersion;
  [k: string]: unknown;
}
export interface InitialItem {
  key: string;
  value: string;
  [k: string]: unknown;
}
export type ListItemsResponse = string[];
export interface MigrateMsg {
  [k: string]: unknown;
}
export type ProposalModulesResponse = Addr[];
export type QueryMsg = {
  group_contract: {
    [k: string]: unknown;
  };
} | {
  dao: {
    [k: string]: unknown;
  };
} | {
  voting_power_at_height: {
    address: string;
    height?: number | null;
    [k: string]: unknown;
  };
} | {
  total_power_at_height: {
    height?: number | null;
    [k: string]: unknown;
  };
} | {
  info: {
    [k: string]: unknown;
  };
};
export interface TotalPowerAtHeightResponse {
  height: number;
  power: Uint128;
  [k: string]: unknown;
}
export type VotingModuleResponse = string;
export interface VotingPowerAtHeightResponse {
  height: number;
  power: Uint128;
  [k: string]: unknown;
}
export interface DumpResponse {
  groups: Group[];
  [k: string]: unknown;
}
export interface Group {
  addresses: string[];
  name: string;
  [k: string]: unknown;
}
export interface IsAddressInGroupResponse {
  is_in_group: boolean;
  [k: string]: unknown;
}
export interface ListAddressesResponse {
  addresses: Addr[];
  [k: string]: unknown;
}
export interface ListGroupsResponse {
  groups: string[];
  [k: string]: unknown;
}
export type PaymentInfo = {
  native_payment: {
    payment_amount: Uint128;
    token_denom: string;
    [k: string]: unknown;
  };
} | {
  cw20_payment: {
    payment_amount: Uint128;
    token_address: string;
    [k: string]: unknown;
  };
};
export interface IsNameAvailableToRegisterResponse {
  reserved: boolean;
  taken: boolean;
  [k: string]: unknown;
}
export interface LookUpDaoByNameResponse {
  dao?: Addr | null;
  [k: string]: unknown;
}
export interface LookUpNameByDaoResponse {
  name?: string | null;
  [k: string]: unknown;
}
export type Threshold = {
  absolute_percentage: {
    percentage: PercentageThreshold;
    [k: string]: unknown;
  };
} | {
  threshold_quorum: {
    quorum: PercentageThreshold;
    threshold: PercentageThreshold;
    [k: string]: unknown;
  };
} | {
  absolute_count: {
    threshold: Uint128;
    [k: string]: unknown;
  };
};
export type PercentageThreshold = {
  majority: {
    [k: string]: unknown;
  };
} | {
  percent: Decimal;
};
export type Decimal = string;
export interface CheckedDepositInfo {
  deposit: Uint128;
  refund_failed_proposals: boolean;
  token: Addr;
  [k: string]: unknown;
}
export type Vote = "yes" | "no" | "abstain";
export type DepositToken = {
  token: {
    address: string;
    [k: string]: unknown;
  };
} | {
  voting_module_token: {
    [k: string]: unknown;
  };
};
export interface DepositInfo {
  deposit: Uint128;
  refund_failed_proposals: boolean;
  token: DepositToken;
  [k: string]: unknown;
}
export interface GetVoteResponse {
  vote?: VoteInfo | null;
  [k: string]: unknown;
}
export interface VoteInfo {
  power: Uint128;
  vote: Vote;
  voter: Addr;
  [k: string]: unknown;
}
export type Status = "open" | "rejected" | "passed" | "executed" | "closed";
export interface ListProposalsResponse {
  proposals: ProposalResponse[];
  [k: string]: unknown;
}
export interface ProposalResponse {
  id: number;
  proposal: Proposal;
  [k: string]: unknown;
}
export interface Proposal {
  allow_revoting: boolean;
  created: Timestamp;
  deposit_info?: CheckedDepositInfo | null;
  description: string;
  expiration: Expiration;
  last_updated: Timestamp;
  min_voting_period?: Expiration | null;
  msgs: CosmosMsgForEmpty[];
  proposer: Addr;
  start_height: number;
  status: Status;
  threshold: Threshold;
  title: string;
  total_power: Uint128;
  votes: Votes;
  [k: string]: unknown;
}
export interface Votes {
  abstain: Uint128;
  no: Uint128;
  yes: Uint128;
  [k: string]: unknown;
}
export interface ListVotesResponse {
  votes: VoteInfo[];
  [k: string]: unknown;
}
export type ProposalCountResponse = number;
export interface ProposalHooksResponse {
  hooks: string[];
  [k: string]: unknown;
}
export interface ReverseProposalsResponse {
  proposals: ProposalResponse[];
  [k: string]: unknown;
}
export interface VoteHooksResponse {
  hooks: string[];
  [k: string]: unknown;
}
export interface VoteResponse {
  vote?: VoteInfo | null;
  [k: string]: unknown;
}
export type StakeChangedHookMsg = {
  stake: {
    addr: Addr;
    amount: Uint128;
    [k: string]: unknown;
  };
} | {
  unstake: {
    addr: Addr;
    amount: Uint128;
    [k: string]: unknown;
  };
};
export type Denom = {
  native: string;
} | {
  cw20: Addr;
};
export interface GetPendingRewardsResponse {
  address: string;
  denom: Denom;
  last_update_block: number;
  pending_rewards: Uint128;
  [k: string]: unknown;
}
export interface RewardConfig {
  period_finish: number;
  reward_duration: number;
  reward_rate: Uint128;
  [k: string]: unknown;
}
export interface PendingRewardsResponse {
  address: string;
  denom: Denom;
  last_update_block: number;
  pending_rewards: Uint128;
  [k: string]: unknown;
}
export interface AllAccountsResponse {
  accounts: string[];
  [k: string]: unknown;
}
export interface AllAllowancesResponse {
  allowances: AllowanceInfo[];
  [k: string]: unknown;
}
export interface AllowanceInfo {
  allowance: Uint128;
  expires: Expiration;
  spender: string;
  [k: string]: unknown;
}
export interface AllowanceResponse {
  allowance: Uint128;
  expires: Expiration;
  [k: string]: unknown;
}
export interface BalanceResponse {
  balance: Uint128;
  [k: string]: unknown;
}
export interface ClaimsResponse {
  claims: Claim[];
  [k: string]: unknown;
}
export interface Claim {
  amount: Uint128;
  release_at: Expiration;
  [k: string]: unknown;
}
export interface GetConfigResponse {
  manager?: string | null;
  owner?: string | null;
  token_address: string;
  unstaking_duration?: Duration | null;
  [k: string]: unknown;
}
export interface GetHooksResponse {
  hooks: string[];
  [k: string]: unknown;
}
export interface StakedBalanceAtHeightResponse {
  balance: Uint128;
  height: number;
  [k: string]: unknown;
}
export interface StakedValueResponse {
  value: Uint128;
  [k: string]: unknown;
}
export interface TokenInfoResponse {
  decimals: number;
  name: string;
  symbol: string;
  total_supply: Uint128;
  [k: string]: unknown;
}
export interface TotalStakedAtHeightResponse {
  height: number;
  total: Uint128;
  [k: string]: unknown;
}
export interface TotalValueResponse {
  total: Uint128;
  [k: string]: unknown;
}
export type ActiveThreshold = {
  absolute_count: {
    count: Uint128;
    [k: string]: unknown;
  };
} | {
  percentage: {
    percent: Decimal;
    [k: string]: unknown;
  };
};
export interface ActiveThresholdResponse {
  active_threshold?: ActiveThreshold | null;
  [k: string]: unknown;
}
export type DaoResponse = string;
export type TokenInfo = {
  existing: {
    address: string;
    staking_contract: StakingInfo;
    [k: string]: unknown;
  };
} | {
  new: {
    code_id: number;
    decimals: number;
    initial_balances: Cw20Coin[];
    initial_dao_balance?: Uint128 | null;
    label: string;
    marketing?: InstantiateMarketingInfo | null;
    name: string;
    staking_code_id: number;
    symbol: string;
    unstaking_duration?: Duration | null;
    [k: string]: unknown;
  };
};
export type StakingInfo = {
  existing: {
    staking_contract_address: string;
    [k: string]: unknown;
  };
} | {
  new: {
    staking_code_id: number;
    unstaking_duration?: Duration | null;
    [k: string]: unknown;
  };
};
export type Logo = {
  url: string;
} | {
  embedded: EmbeddedLogo;
};
export type EmbeddedLogo = {
  svg: Binary;
} | {
  png: Binary;
};
export interface Cw20Coin {
  address: string;
  amount: Uint128;
  [k: string]: unknown;
}
export interface InstantiateMarketingInfo {
  description?: string | null;
  logo?: Logo | null;
  marketing?: string | null;
  project?: string | null;
  [k: string]: unknown;
}
export interface IsActiveResponse {
  active: boolean;
  [k: string]: unknown;
}
export type StakingContractResponse = string;
export type TokenContractResponse = string;
export interface MemberDiff {
  key: string;
  new?: number | null;
  old?: number | null;
  [k: string]: unknown;
}
export type GroupContractResponse = string;
export interface Member {
  addr: string;
  weight: number;
  [k: string]: unknown;
}
export interface CwProposalSingleReadOnlyInterface {
  contractAddress: string;
  admin: () => Promise<AdminResponse>;
  adminNomination: () => Promise<AdminNominationResponse>;
  config: () => Promise<ConfigResponse>;
  cw20Balances: ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }) => Promise<Cw20BalancesResponse>;
  cw20TokenList: ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }) => Promise<Cw20TokenListResponse>;
  cw721TokenList: ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }) => Promise<Cw721TokenListResponse>;
  dumpState: () => Promise<DumpStateResponse>;
  getItem: ({
    key
  }: {
    key: string;
  }) => Promise<GetItemResponse>;
  listItems: ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }) => Promise<ListItemsResponse>;
  proposalModules: ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }) => Promise<ProposalModulesResponse>;
  pauseInfo: () => Promise<PauseInfoResponse>;
  votingModule: () => Promise<VotingModuleResponse>;
  votingPowerAtHeight: ({
    address,
    height
  }: {
    address: string;
    height?: number;
  }) => Promise<VotingPowerAtHeightResponse>;
  totalPowerAtHeight: ({
    height
  }: {
    height?: number;
  }) => Promise<TotalPowerAtHeightResponse>;
  info: () => Promise<InfoResponse>;
}
export class CwProposalSingleQueryClient implements CwProposalSingleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.admin = this.admin.bind(this);
    this.adminNomination = this.adminNomination.bind(this);
    this.config = this.config.bind(this);
    this.cw20Balances = this.cw20Balances.bind(this);
    this.cw20TokenList = this.cw20TokenList.bind(this);
    this.cw721TokenList = this.cw721TokenList.bind(this);
    this.dumpState = this.dumpState.bind(this);
    this.getItem = this.getItem.bind(this);
    this.listItems = this.listItems.bind(this);
    this.proposalModules = this.proposalModules.bind(this);
    this.pauseInfo = this.pauseInfo.bind(this);
    this.votingModule = this.votingModule.bind(this);
    this.votingPowerAtHeight = this.votingPowerAtHeight.bind(this);
    this.totalPowerAtHeight = this.totalPowerAtHeight.bind(this);
    this.info = this.info.bind(this);
  }

  admin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  adminNomination = async (): Promise<AdminNominationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin_nomination: {}
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  cw20Balances = async ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }): Promise<Cw20BalancesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw20_balances: {
        limit,
        start_at: startAt
      }
    });
  };
  cw20TokenList = async ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }): Promise<Cw20TokenListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw20_token_list: {
        limit,
        start_at: startAt
      }
    });
  };
  cw721TokenList = async ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }): Promise<Cw721TokenListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw721_token_list: {
        limit,
        start_at: startAt
      }
    });
  };
  dumpState = async (): Promise<DumpStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dump_state: {}
    });
  };
  getItem = async ({
    key
  }: {
    key: string;
  }): Promise<GetItemResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_item: {
        key
      }
    });
  };
  listItems = async ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }): Promise<ListItemsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_items: {
        limit,
        start_at: startAt
      }
    });
  };
  proposalModules = async ({
    limit,
    startAt
  }: {
    limit?: number;
    startAt?: string;
  }): Promise<ProposalModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proposal_modules: {
        limit,
        start_at: startAt
      }
    });
  };
  pauseInfo = async (): Promise<PauseInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pause_info: {}
    });
  };
  votingModule = async (): Promise<VotingModuleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_module: {}
    });
  };
  votingPowerAtHeight = async ({
    address,
    height
  }: {
    address: string;
    height?: number;
  }): Promise<VotingPowerAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_power_at_height: {
        address,
        height
      }
    });
  };
  totalPowerAtHeight = async ({
    height
  }: {
    height?: number;
  }): Promise<TotalPowerAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_power_at_height: {
        height
      }
    });
  };
  info = async (): Promise<InfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      info: {}
    });
  };
}
export interface CwProposalSingleInterface extends CwProposalSingleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  instantiateContractWithSelfAdmin: ({
    codeId,
    instantiateMsg,
    label
  }: {
    codeId: number;
    instantiateMsg: string;
    label: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class CwProposalSingleClient extends CwProposalSingleQueryClient implements CwProposalSingleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.instantiateContractWithSelfAdmin = this.instantiateContractWithSelfAdmin.bind(this);
  }

  instantiateContractWithSelfAdmin = async ({
    codeId,
    instantiateMsg,
    label
  }: {
    codeId: number;
    instantiateMsg: string;
    label: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      instantiate_contract_with_self_admin: {
        code_id: codeId,
        instantiate_msg: instantiateMsg,
        label
      }
    }, fee, memo, funds);
  };
}